buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

repositories {
    mavenCentral()
    mavenLocal()
    maven { // Vanilla
        name 'Vanilla'
        url 'https://libraries.minecraft.net/'
    }
    maven { // Forge
        name 'ForgeFS'
        url 'https://maven.minecraftforge.net/'
    }
    maven { // JEI
        name 'DVS1 Maven FS'
        url 'https://dvs1.progwml6.com/files/maven'
    }
    maven { //PenguinLib
        name 'Joshiejack'
        url 'https://maven.joshiejack.uk/'
    }
    maven { //CurseForge
        url "https://cursemaven.com"
    }
    maven {
        // Shedaniel's maven (Architectury API)
        url = "https://maven.architectury.dev"
        content {
            includeGroup "me.shedaniel"
        }
    }
    maven {
        // saps.dev Maven (KubeJS and Rhino)
        // you can also use Lat's Maven @ https://maven.latvian.dev/
        url = "https://maven.saps.dev/minecraft"
        content {
            includeGroup "dev.latvian.mods"
        }
    }
}

ext.build_number=""
if (System.getenv().BUILD_NUMBER) {
    ext.build_number="-" + System.getenv().BUILD_NUMBER
}

version = "${minecraft_version}-${mod_version}${build_number}"
group = 'uk.joshiejack.shopaholic' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'Shopaholic'

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'official', version: '1.16.5'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                shopaholic {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                shopaholic {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'shopaholic', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                shopaholic {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.1.16'
    compile fg.deobf("uk.joshiejack.penguinlib:Penguin-Lib:${minecraft_version}-${penguinlib_version}")
    compileOnly fg.deobf("mezz.jei:jei-${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${jei_version}")
    compile fg.deobf("me.shedaniel:architectury-forge:${architectury_version}")
    compile fg.deobf("dev.latvian.mods:rhino:${rhino_version}")
    compile fg.deobf("dev.latvian.mods:kubejs-forge:${kubejs_version}")
    compileOnly fg.deobf("uk.joshiejack.daydreamer:Daydreamer:${minecraft_version}-${daydreamer_version}")
    runtimeOnly fg.deobf("uk.joshiejack.daydreamer:Daydreamer:${minecraft_version}-${daydreamer_version}")
    compileOnly fg.deobf("uk.joshiejack.simplyseasons:Simply-Seasons:${minecraft_version}-${simplyseasons_version}")
    compileOnly fg.deobf("uk.joshiejack.husbandry:Husbandry:${minecraft_version}-${husbandry_version}")
}

jar {
    manifest {
        attributes([
            "Specification-Title": "Shopaholic",
            "Specification-Vendor": "joshiejack",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"joshiejack",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId 'Shopaholic'
            artifact jar
        }
    }
    repositories {
      if (project.hasProperty('mavenRepository')) {
          maven { url mavenRepository }
      } else {
          mavenLocal()
      }
    }
}
